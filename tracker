import React, { useState, useEffect } from "react";

export default function App() {
  // ----- Data Model -----
  const blank = {
    company: "",
    position: "",
    date: "",
    status: "Applied",
    notes: "",
    id: null,
  };

  const [applications, setApplications] = useState([]);
  const [form, setForm] = useState(blank);
  const [editing, setEditing] = useState(false);

  // ----- Persistence -----
  useEffect(() => {
    const stored = localStorage.getItem("jobApplications");
    if (stored) setApplications(JSON.parse(stored));
  }, []);

  useEffect(() => {
    localStorage.setItem("jobApplications", JSON.stringify(applications));
  }, [applications]);

  // ----- Handlers -----
  const handleChange = (e) =>
    setForm({ ...form, [e.target.name]: e.target.value });

  const handleSubmit = (e) => {
    e.preventDefault();
    if (!form.company || !form.position) return;

    if (editing) {
      setApplications(
        applications.map((a) => (a.id === form.id ? form : a))
      );
      setEditing(false);
    } else {
      setApplications([...applications, { ...form, id: Date.now() }]);
    }
    setForm(blank);
  };

  const handleEdit = (app) => {
    setForm(app);
    setEditing(true);
  };

  const handleDelete = (id) => {
    setApplications(applications.filter((a) => a.id !== id));
    if (editing && id === form.id) {
      setForm(blank);
      setEditing(false);
    }
  };

  const handleClear = () => {
    if (confirm("Clear all applications?")) {
      setApplications([]);
      localStorage.removeItem("jobApplications");
    }
  };

  // ----- UI -----
  return (
    <div className="min-h-screen bg-gray-50 p-4">
      <h1 className="text-3xl font-bold mb-4 text-center">
        Job Application Tracker
      </h1>

      {/* Form */}
      <form
        onSubmit={handleSubmit}
        className="grid gap-3 bg-white shadow rounded-2xl p-4 max-w-2xl mx-auto"
      >
        <input
          type="text"
          name="company"
          placeholder="Company"
          className="border p-2 rounded-xl"
          value={form.company}
          onChange={handleChange}
          required
        />
        <input
          type="text"
          name="position"
          placeholder="Position"
          className="border p-2 rounded-xl"
          value={form.position}
          onChange={handleChange}
          required
        />
        <input
          type="date"
          name="date"
          className="border p-2 rounded-xl"
          value={form.date}
          onChange={handleChange}
        />
        <select
          name="status"
          className="border p-2 rounded-xl"
          value={form.status}
          onChange={handleChange}
        >
          <option>Applied</option>
          <option>Interviewing</option>
          <option>Offer</option>
          <option>Rejected</option>
        </select>
        <textarea
          name="notes"
          placeholder="Notes"
          className="border p-2 rounded-xl"
          rows="3"
          value={form.notes}
          onChange={handleChange}
        />
        <button
          type="submit"
          className="bg-blue-600 text-white rounded-xl py-2 hover:bg-blue-700 transition"
        >
          {editing ? "Update Application" : "Add Application"}
        </button>
        {editing && (
          <button
            type="button"
            onClick={() => {
              setForm(blank);
              setEditing(false);
            }}
            className="bg-gray-400 text-white rounded-xl py-2 hover:bg-gray-500 transition"
          >
            Cancel
          </button>
        )}
      </form>

      {/* List */}
      <div className="max-w-5xl mx-auto mt-8">
        {applications.length === 0 ? (
          <p className="text-center text-gray-500">No applications yet.</p>
        ) : (
          <div className="grid gap-4">
            {applications.map((app) => (
              <div
                key={app.id}
                className="bg-white rounded-2xl shadow p-4 flex flex-col md:flex-row justify-between items-start md:items-center"
              >
                <div>
                  <h2 className="text-xl font-semibold">
                    {app.position} @ {app.company}
                  </h2>
                  <p className="text-sm text-gray-500">
                    Applied: {app.date || "â€”"} | Status: {app.status}
                  </p>
                  {app.notes && (
                    <p className="mt-2 whitespace-pre-wrap">{app.notes}</p>
                  )}
                </div>
                <div className="flex gap-2 mt-3 md:mt-0">
                  <button
                    onClick={() => handleEdit(app)}
                    className="bg-yellow-500 text-white rounded-xl px-4 py-2 hover:bg-yellow-600 transition"
                  >
                    Edit
                  </button>
                  <button
                    onClick={() => handleDelete(app.id)}
                    className="bg-red-600 text-white rounded-xl px-4 py-2 hover:bg-red-700 transition"
                  >
                    Delete
                  </button>
                </div>
              </div>
            ))}
          </div>
        )}
        {applications.length > 0 && (
          <button
            onClick={handleClear}
            className="mt-6 bg-red-700 text-white rounded-xl px-6 py-2 block mx-auto hover:bg-red-800 transition"
          >
            Clear All
          </button>
        )}
      </div>
    </div>
  );
}
